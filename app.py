from openai import OpenAI
from pathlib import Path

import base64
import os
import streamlit as st


def image_to_text(image_buffer: bytes, open_ai_key: str) -> str:
    """
    Converts an image to text using OpenAI's GPT-4o model.

    Args:
        image_path (Path): The path to the image file.
        open_ai_key (str): The API key for accessing OpenAI's GPT-4o model.

    Returns:
        str: The text generated by the GPT-4o model.

    Raises:
        FileNotFoundError: If the image file is not found.
        ValueError: If the image file is not a valid image file.

    Example:
        >>> image_to_text(Path("image.png"), "your_open_ai_key")
        "A cat is sleeping on a couch."
    """
    image_base64 = base64.b64encode(image_buffer).decode("utf-8")
    client = OpenAI(api_key=open_ai_key)
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "Describe what is in this image in 30 words or less"
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/png;base64,{image_base64}"
                        }
                    }
                ]
            }
        ],
        max_tokens=300
    )
    text = response.choices[0].message.content
    return text


def generate_story(scenario: str, open_ai_key: str) -> str:
    """
    Generates a short story based on a given scenario using OpenAI's GPT-4o model.

    Args:
        scenario (str): The simple narrative to base the story on.
        open_ai_key (str): The API key for accessing OpenAI's GPT-4o model.

    Returns:
        str: The generated short story.

    Raises:
        None

    Example:
        >>> generate_story("A cat is sleeping on a couch.", "your_open_ai_key")
        "Once upon a time, there was a cat named Fluffy. Fluffy loved to sleep on soft couches. One day, she found the perfect spot on a plush couch in the living room. She curled up and closed her eyes, feeling the soft cushions envelop her. As she drifted off to sleep, she dreamed of chasing butterflies and purring contentedly."
    """
    client = OpenAI(api_key=open_ai_key)
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "You are a story teller. You can generate a short story based on a simple narrative, the story should be no more then 60 words."
            },
            {
                "role": "user",
                "content": scenario
            }
        ],
        max_tokens=300
    )
    story = response.choices[0].message.content
    return story


def story_to_speech(story: str, open_ai_key: str) -> bytes:
    """
    Convert a given story into speech audio using OpenAI's text-to-speech model.

    Args:
        story (str): The story to be converted into speech.
        open_ai_key (str): The API key for accessing OpenAI's text-to-speech model.

    Returns:
        speech (bytes): The generated speech audio in bytes format.

    Raises:
        None
    """
    client = OpenAI(api_key=open_ai_key)
    with client.audio.speech.with_streaming_response.create(
        model="tts-1",
        voice="alloy",
        input=story
    ) as response:
        result = b''.join(response.iter_bytes())

    return result


def main():
    """
    Generates a short audio story based on an uploaded image.

    This function sets the page configuration, displays the title and header
    of the application. It also adds a sidebar to get the OpenAI API key from
    the user. If the API key is not provided, a warning message is displayed.

    The function then allows the user to upload an image. If an image is
    uploaded, it is saved to the "images" directory with the same name as the
    uploaded file. The image is then displayed with a caption.

    The function then calls the `image_to_text` function to convert the
    uploaded image to text using the OpenAI GPT-4o model. The generated
    scenario is displayed in an expander.

    Next, the function calls the `generate_story` function to generate a
    short story based on the scenario. The generated story is displayed in an
    expander.

    Finally, the function calls the `story_to_speech` function to convert the
    generated story into speech audio using the OpenAI text-to-speech model.
    The generated speech audio is displayed as an audio file.

    Parameters:
        None

    Returns:
        None
    """
    st.set_page_config(page_title="Image to Story", page_icon="ðŸ“–")
    st.title("Picstory")
    st.header("Turn an image into a short audio story")

    # Add sidebar to get API key
    with st.sidebar:
        st.subheader("OpenAI API Key")
        open_ai_key = st.text_input("Enter your OpenAI API key", type="password")

    # Add warning if API key is not valid
    if not open_ai_key:
        st.warning("Please enter your OpenAI API key")
    
    uploaded_image = st.file_uploader("Choose an image", type=["png", "jpg", "jpeg"])
    if uploaded_image is not None:
        st.image(uploaded_image, caption="Uploaded Image", use_column_width=True)

        with st.spinner("Processing image..."):
            scenario = image_to_text(uploaded_image.getvalue(), open_ai_key)
        
        with st.expander("Scenario"):
            st.write(scenario)
        
        with st.spinner("Generating story..."):
            story = generate_story(scenario, open_ai_key)

        with st.expander("Story"):
            st.write(story)

        with st.spinner("Generating audio..."):
            speech = story_to_speech(story, open_ai_key)

        with st.expander("Audio"):    
            st.audio(speech, format="audio/mpeg", autoplay=True)


if __name__ == "__main__":
    main()

